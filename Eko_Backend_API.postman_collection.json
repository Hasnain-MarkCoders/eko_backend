{
	"info": {
		"_postman_id": "eko-backend-api-collection",
		"name": "Eko Backend API",
		"description": "Complete API collection for Eko Backend with authentication and profile management endpoints. Supports both Firebase OAuth and email/password authentication.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "eko-backend"
	},
	"item": [
		{
			"name": "General",
			"item": [
				{
					"name": "Root Endpoint",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Get the root endpoint of the API. Returns a welcome message."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Welcome to Eko Backend API\"\n}"
						}
					]
				},
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check the health status of the API. Returns the current health status."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/health",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"healthy\"\n}"
						}
					]
				},
				{
					"name": "API Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/docs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"docs"
							]
						},
						"description": "Access the interactive API documentation (Swagger UI)."
					},
					"response": []
				}
			],
			"description": "General API endpoints for health checks and documentation"
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Firebase Authentication",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accessToken\": \"firebase_token_here\",\n  \"name\": \"John Doe\",\n  \"provider\": \"google.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/firebase",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"firebase"
							]
						},
						"description": "Authenticate user with Firebase ID token. Returns JWT token for subsequent requests. Use this for OAuth providers like Google, Facebook, etc."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accessToken\": \"firebase_token_here\",\n  \"name\": \"John Doe\",\n  \"provider\": \"google.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth/firebase",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"firebase"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"user\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"_id\": \"user_id_here\",\n    \"uid\": \"firebase_uid\",\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\",\n    \"provider\": \"google.com\",\n    \"status\": \"active\",\n    \"welcome\": true,\n    \"image\": \"https://example.com/photo.jpg\",\n    \"type\": \"user\"\n  }\n}"
						}
					]
				},
				{
					"name": "Email/Password Signup",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "Create a new user account with email and password. Returns JWT token and user details."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"securepassword123\",\n  \"name\": \"New User\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"signup"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"user\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"_id\": \"new_user_id\",\n    \"uid\": \"firebase_uid\",\n    \"email\": \"newuser@example.com\",\n    \"name\": \"New User\",\n    \"provider\": \"password\",\n    \"status\": \"active\",\n    \"welcome\": true,\n    \"image\": \"https://example.com/default.jpg\",\n    \"type\": \"user\"\n  },\n  \"message\": \"User created successfully\"\n}"
						}
					]
				},
				{
					"name": "Email/Password Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with existing email and password. Returns JWT token and user details."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"user\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"_id\": \"user_id\",\n    \"uid\": \"firebase_uid\",\n    \"email\": \"user@example.com\",\n    \"name\": \"Test User\",\n    \"provider\": \"password\",\n    \"status\": \"active\",\n    \"welcome\": true,\n    \"image\": \"https://example.com/photo.jpg\",\n    \"type\": \"user\"\n  },\n  \"message\": \"Login successful\"\n}"
						}
					]
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"forgot-password"
							]
						},
						"description": "Initiate password reset for a user. Returns a success message if the email is found."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth/forgot-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"forgot-password"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Password reset email sent successfully\",\n  \"resetLink\": \"https://proj-eko.firebaseapp.com/__/auth/action?mode=resetPassword&oobCode=...\",\n  \"note\": \"In production, this link would be sent via email\"\n}"
						},
						{
							"name": "Error - User Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"nonexistent@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth/forgot-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"forgot-password"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"User not found\"\n}"
						}
					]
				}
			],
			"description": "Authentication endpoints for user login and token generation. Supports both Firebase OAuth and traditional email/password authentication."
		},
		{
			"name": "Profile Management",
			"item": [
				{
					"name": "Change User Name",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"newName\": \"New User Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/profile/change-name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"change-name"
							]
						},
						"description": "Change the current user's display name. Requires authentication via JWT token in Authorization header."
					},
					"response": []
				},
				{
					"name": "Change User Image",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"image_url\": \"https://example.com/new-image.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/profile/change-image",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"change-image"
							]
						},
						"description": "Change the current user's profile image. Requires authentication via JWT token in Authorization header."
					},
					"response": []
				},
				{
					"name": "Delete User Account",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/profile/delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"delete"
							]
						},
						"description": "Delete the current user's account completely from both database and Firebase. This action cannot be undone. Requires authentication via JWT token in Authorization header."
					},
					"response": []
				},
				{
					"name": "Check User Active Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/profile/is-active",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"is-active"
							]
						},
						"description": "Check if the current user's account is active. Requires authentication via JWT token in Authorization header."
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/profile/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"user"
							]
						},
						"description": "Get the current user's profile information. Requires authentication via JWT token in Authorization header."
					},
					"response": []
				},
				{
					"name": "Check Welcome Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/profile/welcome1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"welcome1"
							]
						},
						"description": "Check the user's welcome status. Requires authentication via JWT token in Authorization header."
					},
					"response": [
						{
							"name": "Welcome Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/profile/welcome1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"profile",
										"welcome1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Welcome 1\"\n}"
						}
					]
				},
				{
					"name": "Update Welcome Status",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/profile/welcome2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"welcome2"
							]
						},
						"description": "Update the user's welcome status. Requires authentication via JWT token in Authorization header."
					},
					"response": []
				},
				{
					"name": "Update Notification Token",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"notificationToken\": \"new_notification_token_here\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/profile/update-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"update-token"
							]
						},
						"description": "Update the current user's notification token. Requires authentication via JWT token in Authorization header."
					},
					"response": []
				}
			],
			"description": "Profile management endpoints for user data operations. All endpoints require JWT authentication."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script to set up common variables",
					"console.log('Setting up request for: ' + pm.request.name);",
					"",
					"// Set timestamp for logging",
					"pm.globals.set('timestamp', new Date().toISOString());",
					"",
					"// Log request details",
					"console.log('Request URL: ' + pm.request.url);",
					"console.log('Request Method: ' + pm.request.method);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Test script to validate responses",
					"pm.test('Status code is 200, 201, or 404 (for not found)', function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 404]);",
					"});",
					"",
					"pm.test('Response time is less than 3000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});",
					"",
					"pm.test('Response has required headers', function () {",
					"    pm.expect(pm.response.headers).to.have.property('content-type');",
					"});",
					"",
					"pm.test('Response is valid JSON', function () {",
					"    pm.response.to.have.jsonBody();",
					"});",
					"",
					"// Specific tests for authentication endpoints",
					"if (pm.request.url.path.includes('/auth/')) {",
					"    pm.test('Auth endpoint returns user data or error message', function () {",
					"        const response = pm.response.json();",
					"        if (pm.response.code === 200) {",
					"            pm.expect(response).to.have.property('user');",
					"            pm.expect(response.user).to.have.property('token');",
					"        } else {",
					"            pm.expect(response).to.have.property('detail');",
					"        }",
					"    });",
					"}",
					"",
					"// Specific tests for profile endpoints",
					"if (pm.request.url.path.includes('/profile/')) {",
					"    pm.test('Profile endpoint requires authentication', function () {",
					"        if (pm.response.code === 401 || pm.response.code === 403) {",
					"            pm.expect(pm.response.json()).to.have.property('detail');",
					"        }",
					"    });",
					"}",
					"",
					"// Log response details",
					"console.log('Response Status: ' + pm.response.status);",
					"console.log('Response Time: ' + pm.response.responseTime + 'ms');",
					"console.log('Response Size: ' + pm.response.size().body + ' bytes');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL for the Eko Backend API. Change this for different environments (dev, staging, prod)."
		},
		{
			"key": "auth_token",
			"value": "your_jwt_token_here",
			"type": "string",
			"description": "JWT authentication token obtained from Firebase auth, signup, or login endpoints. Include this in the Authorization header for protected endpoints."
		},
		{
			"key": "user_id",
			"value": "example_user_id_here",
			"type": "string",
			"description": "Example user ID for testing specific user endpoints. Replace with actual user ID from your database."
		},
		{
			"key": "test_email",
			"value": "test@example.com",
			"type": "string",
			"description": "Test email address for authentication testing. Use a unique email for signup tests."
		},
		{
			"key": "test_password",
			"value": "testpassword123",
			"type": "string",
			"description": "Test password for authentication testing. Must be at least 6 characters."
		}
	]
} 